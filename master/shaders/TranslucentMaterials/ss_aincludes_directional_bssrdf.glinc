const float EPSILON_MU = 0.0f;
vec3 S_infinite(vec3 _x, vec3 _w12, vec3 _r, vec3 _no)
{
    vec3 _r_tr = transmission * _r;
    vec3 _r_tr_p1 = _r_tr + vec3(1.0f);
    float x_dot_w12 = dot(_x,_w12);
    float no_dot_w12 = dot(_no,_w12);
    float x_dot_no = dot(_x,_no);
    vec3 _D = D;
    vec3 _T = exp(-_r_tr);
    vec3 coeff = _T / pow(_r,vec3(3.0f));
    vec3 first = C_s * ( (_r * _r) / _D + 3 * _r_tr_p1 * x_dot_w12);
    vec3 second = C_e * ( 3 * _D * _r_tr_p1 * no_dot_w12 - (_r_tr_p1 + 3 * _D * (3 *_r_tr_p1 + _r_tr * _r_tr) / (_r * _r) * x_dot_w12) * x_dot_no);
    vec3 _S = coeff * (first - second);
    return _S;
}


vec3 bssrdf(vec3 _xi,vec3 _nin,vec3 _wi,vec3 _xo, vec3 _no)
{
    vec3 _x = _xo - _xi;
    float r_sqr = dot(_x,_x);

    vec3 _D = D;

    vec3 _w12 = refract2(_wi,_nin,1.0f,ior);

    float mu = -dot(_no, _w12);
    float dot_x_w12 = dot(_x,_w12);
    float dot_x_no = dot(_x,_no);

    vec3 _r_sqr = vec3(r_sqr);
    vec3 _dr_sqr = vec3(r_sqr);
    vec3 _de = de;


    if(mu > EPSILON_MU)
    {
        vec3 project = sqrt(vec3(r_sqr - dot_x_w12 * dot_x_w12)/sqrt(_r_sqr + _de*_de));
        vec3 _D_prime = abs(mu) * _D;
        _dr_sqr += _D_prime * (_D_prime + 2.0f * _de * project);
    }
    else
    {
        vec3 _D_prime = vec3(1.0f) / (3 * (extinction));
        _dr_sqr += _D_prime * _D_prime;
    }

    vec3 _dr = sqrt(_dr_sqr);
    vec3 _nistar;

    if(abs(dot_x_no) < 0.01f )
    {
        _nistar = normalize(_nin);
    }
    else
    {
        vec3 _t = normalize(cross(_nin,_x));
        _nistar = cross(normalize(_x),_t);
    }

    vec3 _xv = _xi + 2 * A * de * _nistar;
    vec3 _dv = vec3(length(_xo - _xv));
    vec3 _wv = _w12 - 2 * dot(_w12,_nistar) * _nistar;

    vec3 _S_r = S_infinite(_xo - _xi, _w12, _dr, _no);
    vec3 _S_v = S_infinite(_xo - _xv, _wv, _dv, _no);
    vec3 _S = _S_r - _S_v;

    float Ti = clamp(fresnel_T(_wi,_nin,1.0f,ior),0.0f,1.0f);

    _S *= Ti;
    _S = max(vec3(0.0f),_S);

    return _S;
}
